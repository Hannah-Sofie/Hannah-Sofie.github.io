const {
  describe,
  it,
  after,
  before,
  afterEach,
  beforeEach,
} = require("node:test");
const assert = require("node:assert");
const puppeteer = require("puppeteer");

describe("The 'home' page", () => {
  let browser, page;
  before(async () => {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 100,
      args: ["--window-size=1440,1000"],
    });
  });

  after(async () => {
    await browser.close();
  });

  beforeEach(async () => {
    page = await browser.newPage();
    await page.setViewport({ width: 1440, height: 1000 });
    await page.goto("http://localhost:8083/");
  });

  afterEach(async () => {
    const pages = await browser.pages();
    for (const aPage of pages) {
      await aPage.close();
    }
  });

  // Test for the title of the page
  it("should load successfully", async () => {
    const title = await page.title();
    // await page.screenshot({ path: "screenshots/home.png", fullPage: true });
    assert.strictEqual(title, "Sustainability Diary");
  });

  // Test login functionality
  it("should allow a user to log in and maintain a session", async () => {
    await page.goto("http://localhost:8083/login");
    await page.type("#email", "hserikse@ntnu.no");
    await page.type("#password", "P@ssword123");
    await Promise.all([
      page.click("#login-button"),
      page.waitForNavigation({ timeout: 10000 }),
    ]);

    // // Check if login was successful by looking for a specific element that only appears post-login
    // const logoutButton = await page.waitForSelector("#logout-button", {
    //   visible: true,
    // });
    // assert(logoutButton, "Logout button should be visible after login");

    // // Navigate to another page and check if the user is still logged in
    // await page.goto("http://localhost:8083/dashboard");
    // const dashboardAccess = await page.$("#dashboard-content");
    // assert(
    //   dashboardAccess,
    //   "User should have access to the dashboard after login"
    // );
  });
});
